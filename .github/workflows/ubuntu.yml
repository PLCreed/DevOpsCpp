name: Ubuntu

on:
  push:
    branches:
      - master
      - main
  pull_request:
    branches:
      - master
      - main

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  INSTALL_LOCATION: install

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[skip ci]') && !contains(github.event.head_commit.message, '[ci skip]')"

    steps:
      - uses: actions/checkout@v3

      - name: Cache Dependencies
        uses: actions/cache@v3
        id: cache
        with:
          path: ${{ github.workspace }}
          key: ${{ runner.os }}-dependencies

      - name: Configure CMake
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: cmake -Bbuild -DCMAKE_INSTALL_PREFIX="${{ github.workspace }}/${{ env.INSTALL_LOCATION }}"

      - name: Build
        # Build your program with the given configuration
        run: cmake --build build --config ${{env.BUILD_TYPE}} -j

      - name: Run Tests
        working-directory: build
        # Execute tests defined by the CMake configuration.
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: ctest -C ${{env.BUILD_TYPE}}

      - name: Install Project
        run: cmake --build build --target install --config Release
