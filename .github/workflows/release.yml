name: Release

on:
  push:
    tags:
      - "v*"

env:
  PROJECT_NAME: "DevOpsCpp"
  BUILD_TYPE: Release
  INSTALL_LOCATION: install
  ARTIFACT_LOCATION: .

jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - {
              name: "Windows Latest MSVC",
              artifact_ext: ".zip",
              os: windows-latest,
              cc: "cl",
              cxx: "cl",
              environment_script: "C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Auxiliary/Build/vcvars64.bat",
            }
          - {
              name: "Ubuntu Latest GCC",
              artifact_ext: ".tar.gz",
              os: ubuntu-latest,
              cc: "gcc",
              cxx: "g++",
            }
          - {
              name: "macOS Latest Clang",
              artifact_ext: ".tar.gz",
              os: macos-latest,
              cc: "clang",
              cxx: "clang++",
            }

    steps:
      - name: Set Version Name (Windows)
        id: version_win
        if: ${{ runner.os == 'Windows' }}
        run: |
          echo ${env:GITHUB_REF}
          $TAG = (${env:GITHUB_REF} -replace 'refs/tags/', '')
          echo $TAG
          echo "name=$TAG" >> $env:GITHUB_OUTPUT

      - name: Set Version Name
        id: version
        if: ${{ runner.os != 'Windows' }}
        run: echo "name=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Cache Dependencies
        uses: actions/cache@v3
        id: cache
        with:
          path: ${{ github.workspace }}/${{ env.INSTALL_LOCATION }}
          key: ${{ runner.os }}-dependencies

      - name: Configure CMake
        run: cmake -Bbuild -DCMAKE_INSTALL_PREFIX="${{ github.workspace }}/${{ env.INSTALL_LOCATION }}"

      - name: Build
        run: cmake --build build --config "$env:BUILD_TYPE" -j

      - name: Run Tests
        working-directory: build
        # Execute tests defined by the CMake configuration.
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: ctest -C ${{env.BUILD_TYPE}}

      - name: Install Project
        run: cmake --build build --target install --config Release

      # for a release not containing directly the source code, replace the files archived
      # with the actual files needed (i.e. *.lib/*.a and *.h(pp))
      - name: Generate Archive (Windows)
        if: ${{ runner.os == 'Windows' }}
        run: |
          echo "${{ github.workspace }}"
          echo "${{ github.workspace }}/${{ env.INSTALL_LOCATION }}"
          ls ${{ github.workspace }}
          ls ${{ env.INSTALL_LOCATION }}
          rmdir -r -fo build
          7z a -tzip ${{ env.ARTIFACT_LOCATION }}/artifact.zip ./${{ env.INSTALL_LOCATION }}/*
          rmdir -r -fo ./${{ env.INSTALL_LOCATION }}
          ls ${{ env.ARTIFACT_LOCATION }}

      - name: Generate Archive
        if: ${{ runner.os != 'Windows' }}
        run: |
          echo "${{ github.workspace }}"
          echo "${{ github.workspace }}/${{ env.INSTALL_LOCATION }}"
          ls -al ${{ github.workspace }}
          ls -al ${{ env.INSTALL_LOCATION }}        
          rm -rf build
          echo "${{ env.ARTIFACT_LOCATION }}/artifact.tar.gz -C ${{ env.INSTALL_LOCATION }} ."
          tar -cvzf ${{ env.ARTIFACT_LOCATION }}/artifact.tar.gz -C ${{ env.INSTALL_LOCATION }} . 
          rm -rf ${{ env.INSTALL_LOCATION }}
          ls -al ${{ env.ARTIFACT_LOCATION }}

      - name: Upload Artifacts (Windows)
        uses: actions/upload-artifact@v3
        if: ${{ runner.os == 'Windows' }}
        with:
          name: ${{ runner.os }}-${{ steps.version_win.outputs.name }}
          path: "${{ env.ARTIFACT_LOCATION }}/artifact.*"

      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        if: ${{ runner.os != 'Windows' }}
        with:
          name: ${{ runner.os }}-${{ steps.version.outputs.name }}
          path: "${{ env.ARTIFACT_LOCATION }}/artifact.*"

  release:
    if: contains(github.ref, 'tags/v')
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Set Version Name
        id: version
        if: ${{ runner.os != 'Windows' }}
        run: echo "name=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ steps.version.outputs.name }}
          # if needed, you can set the release body here
          #body: "Release notes"
          draft: false
          prerelease: false

      - name: Download Ubuntu Artifact
        uses: actions/download-artifact@v3
        with:
          name: "Linux-${{ steps.version.outputs.name }}"
          path: ./

      - name: Upload Ubuntu Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: "artifact.tar.gz"
          asset_name: "${{ env.PROJECT_NAME }}-Linux-${{ steps.version.outputs.name }}.tar.gz"
          asset_content_type: application/x-tar

      - name: Download Windows Artifact
        uses: actions/download-artifact@v3
        with:
          name: "Windows-${{ steps.version.outputs.name }}"
          path: ./

      - name: Upload Windows Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: "artifact.zip"
          asset_name: "${{ env.PROJECT_NAME }}-Windows-${{ steps.version.outputs.name }}.zip"
          asset_content_type: application/zip

      - name: Download Macos Artifact
        uses: actions/download-artifact@v3
        with:
          name: "macOS-${{ steps.version.outputs.name }}"
          path: ./

      - name: Upload Macos Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: "./artifact.tar.gz"
          asset_name: "${{ env.PROJECT_NAME }}-macOS-${{ steps.version.outputs.name }}.tar.gz"
          asset_content_type: application/x-tar
